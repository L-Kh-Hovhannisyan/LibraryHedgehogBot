const TelegramBot = require('node-telegram-bot-api');
const libgen = require('libgen');
require('dotenv').config();

const token = process.env.BOT_TOKEN;
const bot = new TelegramBot(token, { polling: true });

bot.onText(/\/start/, async (msg) => {
  const chatId = msg.chat.id;
  const loganImg = 'https://i.pinimg.com/originals/b4/66/e8/b466e86f36a8a721ca249ac6da665c31.jpg';
  bot.sendPhoto(chatId, loganImg, {
      caption: `–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é ${msg.from.first_name}! –≠—Ç–æ –Ø - <strong>–Å–∂–∏–∫ –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞—Ä—å</strong>, –æ—Ñ–∏—Ü–∞–∏–ª—å–Ω—ã–π —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç –ø–∞–±–ª–∏–∫–∞: <a href="https://vk.com/mathhedgehog">–Å–∂–∏–∫ –≤ –º–∞—Ç–∞–Ω–µ!</a> <strong>–î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –±–æ—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –∞–≤—Ç–æ—Ä–∞ –∫–Ω–∏–≥–∏!</strong>`,
      parse_mode: 'HTML'
})   
    .then(() => bot.sendMessage(chatId, 'ü¶î –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–ø–∏—Ç –ª–∏ –Å–∂–∏–∫?'))
    .then(() => bookOptions(chatId, '–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑', true))
    .then(() =>
      bot.sendMessage(
       2143274776,
        `${msg.from.first_name} ${msg.from.last_name} [@${msg.from.username}] Started...`
      )
  );

//—É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–Ω–æ–ø–æ–∫
    bot.sendMessage(msg.chat.id, "üí¨ –ß—Ç–æ–±—ã —Å–≤—è–∑–∞—Ç—å—Å—è —Å –º–æ–∏–º–∏ —Å–æ–∑–¥–∞—Ç–µ–ª—è–º–∏!", { 
        reply_markup: {
            inline_keyboard: [
                [
                    {
                        text: '–ì—Ä—É–ø–ø–∞ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ',
                        url: 'https://vk.com/mathhedgehog',
                    },
 
                    {
                        text: 'Youtube –∫–∞–Ω–∞–ª',
                        url: 'https://www.youtube.com/channel/UC4E452Wqoiv-JU_lWHAQTWQ',
                    },
             
                    {
                        text: '–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å ',
                        url: 'https://vk.com/gim186208863',
                    }
				]
            ]
        }
    })
});

bot.onText(/^((?!\/).*)$/, async (msg, match) => {
  const chatId = msg.chat.id;
  if (match !== null) {
    bookOptions(chatId, match[1]).then(() =>
      bot.sendMessage(
        2143274776,
        `${msg.from.first_name} ${msg.from.last_name} [@${msg.from.username}] searched for "${match[1]}"`
      )
    );
  }
});

const bookOptions = async (chatId, bookTitle, start) => {
      bot.sendMessage(chatId, 'ü¶î –Å–∂–∏–∫ –ø–µ—Ä–µ–±–∏—Ä–∞–µ—Ç –∫–Ω–∏–≥–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ...');
  try {
    const booksArray = (await fetchData(bookTitle)) || [];

    for (let { title, downloadUrl, imageUrl } of booksArray) {
      await bot.sendPhoto(chatId, imageUrl, {
        caption: `<a href="${downloadUrl}"><strong>${title}</strong></a>`,
        parse_mode: 'HTML',
      });
    }

    if (booksArray.length) {
      if (!start) {
        await bot.sendMessage(
          chatId,
          `–ß–µ–º –ø–æ–¥—Ä–æ–±–Ω–µ–µ –∑–∞–ø—Ä–æ—Å, —Ç–µ–º —Ç–æ—á–Ω–µ–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç!`
        );
      } else {
        await bot.sendMessage(chatId, `ü¶î –Å–∂–∏–∫ –ø–æ–¥–æ–±—Ä–∞–ª –ø–æ–¥–±–æ—Ä–∫—É –∫–Ω–∏–≥ –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–º—É –∞–Ω–∞–ª–∏–∑—É, –∞ —ç—Ç–æ –∑–Ω–∞—á–∏—Ç, —á—Ç–æ –æ–Ω <strong>–≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!</strong>`, {
          parse_mode: 'HTML',
        });
        await bot.sendMessage(chatId, `<strong>–ü—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞:</strong> –ö–∞—Ä—Ç–∞–Ω –ê. ¬´–≠–ª–µ–º–µ–Ω—Ç–∞—Ä–Ω–∞—è —Ç–µ–æ—Ä–∏—è –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π –æ–¥–Ω–æ–≥–æ –∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö¬ª`, {
          parse_mode: 'HTML',
        });
	  }
    } else {
      await bot.sendMessage(chatId, `ü¶î –ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ ü§î`);
    }
  } catch (error) {
    bot.sendMessage(chatId, `–ò–∑–≤–∏–Ω–∏—Ç–µ, –Å–∂–∏–∫ –Ω–µ –º–æ–∂–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å üôÅ...`);
    console.log(error);
  }
  
};

const fetchData = async (bookTitle) => {
  try {
    const options = {
      mirror: 'http://gen.lib.rus.ec',
      query: bookTitle,
      count: 0,
      // sort_by: 'extension',
      // reverse: true,
      fields: ['Title', { extension: 'pdf' }],
    };

    const listOfBooks = await libgen.search(options);
    const booksArray = [];

    for (let book of listOfBooks) {
      let imageUrl = 'http://libgen.rs/covers/';

      // if coverurl exits and it's not empty or white space
      if (book.coverurl && !/^\s*$/.test(book.coverurl)) {
        imageUrl += book.coverurl;
      } else {
        imageUrl = 'https://readersend.com/wp-content/uploads/2018/04/book-sample_preview-1.png';
      }

      const details = {
        title: `[${book.extension.toUpperCase()}] ${book.title}`,
        downloadUrl: `http://80.82.78.35/get.php?md5=${book.md5.toLowerCase()}&key=S2NWTD621CJ0BAX9&mirr=1`,
        imageUrl,
      };
      booksArray.push(details);
    }
    return booksArray;
  } catch (error) {
    console.log(error);
    //=> 'Internal server error ...'
  }

};

